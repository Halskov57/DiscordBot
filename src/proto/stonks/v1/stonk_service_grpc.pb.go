// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: stonks/v1/stonk_service.proto

package stonksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StonkServiceClient is the client API for StonkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StonkServiceClient interface {
	GetStonk(ctx context.Context, in *GetStonkRequest, opts ...grpc.CallOption) (*GetStonkResponse, error)
}

type stonkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStonkServiceClient(cc grpc.ClientConnInterface) StonkServiceClient {
	return &stonkServiceClient{cc}
}

func (c *stonkServiceClient) GetStonk(ctx context.Context, in *GetStonkRequest, opts ...grpc.CallOption) (*GetStonkResponse, error) {
	out := new(GetStonkResponse)
	err := c.cc.Invoke(ctx, "/stonk.v1.StonkService/GetStonk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StonkServiceServer is the server API for StonkService service.
// All implementations should embed UnimplementedStonkServiceServer
// for forward compatibility
type StonkServiceServer interface {
	GetStonk(context.Context, *GetStonkRequest) (*GetStonkResponse, error)
}

// UnimplementedStonkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStonkServiceServer struct {
}

func (UnimplementedStonkServiceServer) GetStonk(context.Context, *GetStonkRequest) (*GetStonkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStonk not implemented")
}

// UnsafeStonkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StonkServiceServer will
// result in compilation errors.
type UnsafeStonkServiceServer interface {
	mustEmbedUnimplementedStonkServiceServer()
}

func RegisterStonkServiceServer(s grpc.ServiceRegistrar, srv StonkServiceServer) {
	s.RegisterService(&StonkService_ServiceDesc, srv)
}

func _StonkService_GetStonk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStonkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StonkServiceServer).GetStonk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stonk.v1.StonkService/GetStonk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StonkServiceServer).GetStonk(ctx, req.(*GetStonkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StonkService_ServiceDesc is the grpc.ServiceDesc for StonkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StonkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stonk.v1.StonkService",
	HandlerType: (*StonkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStonk",
			Handler:    _StonkService_GetStonk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stonks/v1/stonk_service.proto",
}
